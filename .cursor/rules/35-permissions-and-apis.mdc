---
description: WebExtension permissions and APIs usage patterns
globs: ['src/**/*.{ts,tsx}']
alwaysApply: true
---

## Permissions

- Manifest requests: `activeTab`, `storage`. Content scripts run on `<all_urls>`.
- Request only what you need; consider host permissions when applicable.

## Storage

```ts
// Save
await browser.storage.local.set({ key: value });
// Read
const { key } = await browser.storage.local.get(['key']);
```

- Use `storage.sync` for small cross-device preferences; `storage.local` for larger or device-specific data.
- Handle quota errors and fallback gracefully.

## Messaging

```ts
import browser from 'webextension-polyfill';

// Content/Popup â†’ Background
const res = await browser.runtime.sendMessage({ type: 'getData' });

// Background
browser.runtime.onMessage.addListener((msg, _sender, sendResponse) => {
  (async () => {
    if (msg.type === 'getData') sendResponse({ data: 'ok' });
  })();
  return true; // async response
});
```

## Tabs

```ts
import browser from 'webextension-polyfill';

const [tab] = await browser.tabs.query({ active: true, currentWindow: true });
```

## Error handling

- Wrap WebExtension API calls with try/catch when appropriate.
- For callback-based APIs, check `browser.runtime.lastError` when applicable; the polyfill maps most errors to promise rejections.
